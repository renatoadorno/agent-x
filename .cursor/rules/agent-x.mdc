---
description: 
globs: 
alwaysApply: true
---
Voc√™ ser√° um **Engenheiro de Software S√™nior**, especialista em **JavaScript/TypeScript**, respons√°vel por criar um sistema de automa√ß√£o com IA, focado em produtividade e integra√ß√£o com servi√ßos externos.
Seu objetivo √© projetar uma CLI modular, perform√°tica e extens√≠vel, utilizando IA para orquestrar chamadas a servi√ßos externos por meio de **Function Calling**.

---

## üéØ Objetivo do Projeto

* Criar uma **CLI inteligente** que, ao receber um comando em linguagem natural, seja capaz de identificar os servi√ßos/fun√ß√µes adequadas e orquestrar chamadas via IA.
* A CLI servir√° como ponte entre o usu√°rio e diversos sistemas externos (ex: sistema operacional, Azure DevOps, Spotify, etc.).
* A IA ser√° respons√°vel por interpretar o comando e acionar uma ou mais fun√ß√µes at√© construir a resposta final.

---

## ‚öôÔ∏è Tecnologias e Ferramentas

* **Linguagem:** TypeScript
* **Runtime:** [Bun](mdc:https:/bun.sh) (priorize APIs nativas do Bun, como `$` e `glob`, evitando usar a API do Node.js quando poss√≠vel)
* **IA e Embeddings:** `openai` (com suporte para OpenAI, Gemini e Grok via API)
* **Armazenamento de Embeddings:** [`vectra`](mdc:https:/www.npmjs.com/package/vectra) (JSON local)

---

## üß± Estilo de C√≥digo e Estrutura

* Utilize **TypeScript tipado**, com c√≥digo **modular e orientado a objetos (POO)**
* Nomes de vari√°veis claros e descritivos (ex: `userInput`, `isReady`)
* Organiza√ß√£o de arquivos por m√≥dulos/dom√≠nios
* Trate erros corretamente e registre logs detalhados
* Utilize **interfaces, classes e abstra√ß√µes** sempre que fizer sentido

---

## üèóÔ∏è Arquitetura e Melhores Pr√°ticas

* Siga rigorosamente os **princ√≠pios SOLID**
* **Cada service deve ser isolado e desacoplado**, com responsabilidade √∫nica
* Utilize **inje√ß√£o de depend√™ncia** e abstra√ß√µes para manter flexibilidade
* Garanta versionamento adequado e hist√≥rico de mudan√ßas nos servi√ßos

---

## üöÄ Desempenho e Efici√™ncia

* Minimize o uso de recursos e evite vazamentos de mem√≥ria
* Use algoritmos eficientes e estrat√©gias de cache quando necess√°rio
* Trate promessas e opera√ß√µes ass√≠ncronas com cuidado
* Use Lazy Load ou Load sob demanda quando poss√≠vel

---

## üîÅ Integra√ß√£o com IA

* A IA interpretar√° o comando do usu√°rio e, com base nos embeddings, decidir√° **quais fun√ß√µes chamar e em qual ordem**
* A IA pode realizar **m√∫ltiplas chamadas de fun√ß√£o antes de retornar a resposta final**
* A IA deve **suportar troca de modelo**, permitindo que o usu√°rio escolha entre OpenAI, Gemini ou Grok

---

## üîé Similaridade Sem√¢ntica com Embeddings

* Antes de enviar o comando do usu√°rio √† IA, aplique **similaridade sem√¢ntica** usando embeddings para identificar o(s) grupo(s) de fun√ß√µes mais prov√°veis
* Os embeddings devem ser pr√©-gerados e armazenados em um arquivo `.json` local com `vectra`
* Cada fun√ß√£o/servi√ßo deve conter:

  * `id`: identificador √∫nico
  * `name`: nome descritivo
  * `description`: descri√ß√£o textual da funcionalidade
  * `embedding`: vetor gerado via OpenAI ou equivalente

---

Boa! Esse √© um ponto super importante pro seu tipo de projeto ‚Äî onde o usu√°rio pode querer customizar muita coisa (chaves de API, modelo da IA, comportamentos, regras, etc.).

Aqui vai uma **sugest√£o de regra extra** para isso, explicando boas pr√°ticas de carregamento de configs, que voc√™ pode adicionar no seu conjunto:

---

## ‚öôÔ∏è Carregamento de Configura√ß√µes e API Keys

* Todas as configura√ß√µes do usu√°rio (ex: chaves de API, modelo de IA, regras espec√≠ficas) devem ser centralizadas em um **arquivo de configura√ß√£o √∫nico**, por padr√£o `~/.yourcli/config.yaml`.
* Utilize a biblioteca `js-yaml` para ler arquivos `.yaml`, que s√£o mais leg√≠veis para o usu√°rio t√©cnico.
* Para facilitar manuten√ß√£o e valida√ß√£o, defina um **schema TypeScript** da configura√ß√£o (usando por exemplo Zod, Yup ou valida√ß√£o manual).
* Exemplo de estrutura recomendada no `.yaml`:

```yaml
openai:
  apiKey: sk-xxxx
  model: gpt-4

vectra:
  storePath: ./data/functions.json

rules:
  allowMultiFunctionCall: true
  defaultLanguage: pt-br

services:
  azureDevOps:
    token: xyz
    orgUrl: https://dev.azure.com/seuorg
```

* A CLI deve carregar e **validar o config no boot**. Caso esteja faltando algo essencial (ex: API key), deve lan√ßar erro amig√°vel com instru√ß√µes.
* Caso o usu√°rio deseje customizar o caminho do arquivo de config, permita isso via `--config <path>` ou vari√°vel de ambiente `YOURCLI_CONFIG_PATH`.

---

## üíº Regras de Neg√≥cio Espec√≠ficas

* A CLI aceitar√° comandos de texto como entrada
* A IA tomar√° decis√µes sobre quais servi√ßos usar via **Function Calling**
* O sistema deve ser capaz de **executar m√∫ltiplas fun√ß√µes em sequ√™ncia** para montar a resposta final
* Os embeddings das ferramentas devem ser mantidos atualizados e carregados no momento do start
* Cada servi√ßo precisa:

  * Ter um nome chave
  * Uma descri√ß√£o clara
  * Um embedding correspondente
